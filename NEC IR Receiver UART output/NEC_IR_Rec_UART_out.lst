

HI-TECH Software PIC PRO Macro Assembler V9.83 build 10920 
                                                                                               Thu Nov 20 21:28:38 2014

HI-TECH Software Omniscient Code Generator (PRO mode) build 10920
     1                           	processor	12F675
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	config,global,class=CONFIG,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	cinit,global,class=CODE,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,delta=2
    13                           	psect	text123,local,class=CODE,delta=2
    14                           	psect	text124,local,class=CODE,delta=2
    15                           	psect	intentry,global,class=CODE,delta=2
    16                           	psect	text125,local,class=CODE,delta=2
    17                           	psect	text126,local,class=CODE,delta=2
    18                           	psect	text127,local,class=CODE,delta=2
    19                           	psect	pa_nodes,global,class=CODE,delta=2
    20                           	dabs	1,0x5E,2
    21  000A                     	;#
    22                           
    23                           	psect	config
    24  2007  31D4               	dw	12756	;#
    25                           
    26                           	psect	idataBANK0
    27  0000                     __pidataBANK0:	
    28  0019                     _CMCON	set	25
    29  0005                     _GPIO	set	5
    30  0005                     _GPIObits	set	5
    31  000B                     _INTCONbits	set	11
    32  0001                     _TMR0	set	1
    33  009F                     _ANSEL	set	159
    34  009B                     _EEADR	set	155
    35  009C                     _EECON1bits	set	156
    36  009D                     _EECON2	set	157
    37  009A                     _EEDATA	set	154
    38  0096                     _IOC	set	150
    39  0081                     _OPTION_REG	set	129
    40  0085                     _TRISIO	set	133
    41                           
    42                           	psect	cinit
    43  017F                     start_initialization:	
    44  017F  3020               	movlw	low __pbssBANK0
    45                           
    46                           ; Clear objects allocated to BANK0
    47  0180  1383               	bcf	3,7	;select IRP bank0
    48  0181  0084               	movwf	4
    49  0182  302D               	movlw	low (__pbssBANK0+13)
    50  0183  218E               	fcall	clear_ram
    51                           
    52                           ;initializer for _PREPULSE
    53  0184  3060               	movlw	96
    54  0185  00BA               	movwf	__pdataBANK0& (0+127)
    55  0186  301F               	movlw	31
    56  0187  00BB               	movwf	(__pdataBANK0+1)& (0+127)
    57                           
    58                           ;initializer for _TIMEOUT
    59  0188  3024               	movlw	36
    60  0189  00BC               	movwf	(__pdataBANK0+2)& (0+127)
    61  018A  302B               	movlw	43
    62  018B  00BD               	movwf	(__pdataBANK0+3)& (0+127)
    63  018C                     end_of_initialization:	
    64                           ;End of C runtime variable initialization code
    65                           
    66  018C  0183               	clrf	3
    67  018D  28CA               	ljmp	_main	;jump to C main() function
    68                           
    69                           	psect	bssBANK0
    70  0020                     __pbssBANK0:	
    71  0020                     interruptOnChangeIsr@rxbuffer:	
    72  0020                     	ds	4
    73  0024                     _timer:	
    74  0024                     	ds	3
    75  0027                     _address:	
    76  0027                     	ds	1
    77  0028                     _command:	
    78  0028                     	ds	1
    79  0029                     _dataready:	
    80  0029                     	ds	1
    81  002A                     _necpoj:	
    82  002A                     	ds	1
    83  002B                     _notaddress:	
    84  002B                     	ds	1
    85  002C                     _notcommand:	
    86  002C                     	ds	1
    87                           
    88                           	psect	dataBANK0
    89  003A                     __pdataBANK0:	
    90  003A                     _PREPULSE:	
    91  003A                     	ds	2
    92  003C                     _TIMEOUT:	
    93  003C                     	ds	2
    94                           
    95                           	psect	clrtext
    96  018E                     clear_ram:	
    97                           ;	Called with FSR containing the base address, and
    98                           ;	W with the last address+1
    99                           
   100  018E  0064               	clrwdt	;clear the watchdog before getting into this loop
   101  018F                     clrloop:	
   102  018F  0180               	clrf	0	;clear RAM location pointed to by FSR
   103  0190  0A84               	incf	4,f	;increment pointer
   104  0191  0604               	xorwf	4,w	;XOR with final address
   105  0192  1903               	btfsc	3,2	;have we reached the end yet?
   106  0193  3400               	retlw	0	;all done for this memory range, return
   107  0194  0604               	xorwf	4,w	;XOR again to restore value
   108  0195  298F               	goto	clrloop	;do the next byte
   109                           
   110                           	psect	cstackCOMMON
   111  0000                     __pcstackCOMMON:	
   112  0000                     ??_timerInterruptIsr:	
   113                           
   114                           	psect	cstackBANK0
   115  002D                     __pcstackBANK0:	
   116                           ; 0 bytes @ 0x0
   117                           
   118  002D                     ?_timerInterruptIsr:	
   119  002D                     ?_interruptOnChangeIsr:	
   120                           ; 0 bytes @ 0x0
   121                           
   122  002D                     ??_interruptOnChangeIsr:	
   123                           ; 0 bytes @ 0x0
   124                           
   125  002D                     ?_UART_Transmit:	
   126                           ; 0 bytes @ 0x0
   127                           
   128  002D                     ?_t0intr:	
   129                           ; 0 bytes @ 0x0
   130                           
   131  002D                     ?_main:	
   132                           ; 0 bytes @ 0x0
   133                           
   134                           
   135                           ; 0 bytes @ 0x0
   136  002D                     	ds	3
   137  0030                     interruptOnChangeIsr@tdiff:	
   138                           
   139                           ; 3 bytes @ 0x3
   140  0030                     	ds	3
   141  0033                     interruptOnChangeIsr@pin:	
   142                           
   143                           ; 1 bytes @ 0x6
   144  0033                     	ds	1
   145  0034                     ??_t0intr:	
   146                           
   147                           ; 0 bytes @ 0x7
   148  0034                     	ds	2
   149  0036                     ??_UART_Transmit:	
   150                           
   151                           ; 0 bytes @ 0x9
   152  0036                     	ds	1
   153  0037                     UART_Transmit@DataValue:	
   154                           
   155                           ; 1 bytes @ 0xA
   156  0037                     	ds	1
   157  0038                     UART_Transmit@i:	
   158                           
   159                           ; 1 bytes @ 0xB
   160  0038                     	ds	1
   161  0039                     ??_main:	
   162                           
   163                           ; 0 bytes @ 0xC
   164  0039                     	ds	1
   165                           
   166                           	psect	maintext
   167  00CA                     __pmaintext:	
   168 ;;Data sizes: Strings 0, constant 0, data 4, bss 13, persistent 0 stack 0
   169 ;;Auto spaces:   Size  Autos    Used
   170 ;; COMMON           0      0       0
   171 ;; BANK0           62     13      30
   172 ;;
   173 ;; Pointer list with targets:
   174 ;;
   175 ;; Critical Paths under _main in COMMON
   176 ;;
   177 ;;   None.
   178 ;;
   179 ;; Critical Paths under _t0intr in COMMON
   180 ;;
   181 ;;   None.
   182 ;;
   183 ;; Critical Paths under _main in BANK0
   184 ;;
   185 ;;   _main->_UART_Transmit
   186 ;;
   187 ;; Critical Paths under _t0intr in BANK0
   188 ;;
   189 ;;   _t0intr->_interruptOnChangeIsr
   190 ;;
   191 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   192 ;;
   193 ;;
   194 ;;Call Graph Tables:
   195 ;;
   196 ;; ---------------------------------------------------------------------------------
   197 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   198 ;; ---------------------------------------------------------------------------------
   199 ;; (0) _main                                                 1     1      0      90
   200 ;;                                             12 BANK0      1     1      0
   201 ;;                      _UART_Transmit
   202 ;; ---------------------------------------------------------------------------------
   203 ;; (1) _UART_Transmit                                        3     3      0      90
   204 ;;                                              9 BANK0      3     3      0
   205 ;; ---------------------------------------------------------------------------------
   206 ;; Estimated maximum stack depth 1
   207 ;; ---------------------------------------------------------------------------------
   208 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   209 ;; ---------------------------------------------------------------------------------
   210 ;; (2) _t0intr                                               2     2      0     135
   211 ;;                                              7 BANK0      2     2      0
   212 ;;                  _timerInterruptIsr
   213 ;;               _interruptOnChangeIsr
   214 ;; ---------------------------------------------------------------------------------
   215 ;; (3) _interruptOnChangeIsr                                 7     7      0     135
   216 ;;                                              0 BANK0      7     7      0
   217 ;; ---------------------------------------------------------------------------------
   218 ;; (3) _timerInterruptIsr                                    0     0      0       0
   219 ;; ---------------------------------------------------------------------------------
   220 ;; Estimated maximum stack depth 3
   221 ;; ---------------------------------------------------------------------------------
   222 ;; Call Graph Graphs:
   223 ;; _main (ROOT)
   224 ;;   _UART_Transmit
   225 ;;
   226 ;; _t0intr (ROOT)
   227 ;;   _timerInterruptIsr
   228 ;;   _interruptOnChangeIsr
   229 ;;
   230 ;; Address spaces:
   231 ;;Name               Size   Autos  Total    Cost      Usage
   232 ;;SFR1                 0      0       0       2        0.0%
   233 ;;BITSFR1              0      0       0       2        0.0%
   234 ;;CODE                 0      0       0       0        0.0%
   235 ;;DATA                 0      0      23       6        0.0%
   236 ;;ABS                  0      0      1E       5        0.0%
   237 ;;NULL                 0      0       0       0        0.0%
   238 ;;STACK                0      0       5       2        0.0%
   239 ;;BANK0               3E      D      1E       4       48.4%
   240 ;;BITBANK0            3E      0       0       3        0.0%
   241 ;;SFR0                 0      0       0       1        0.0%
   242 ;;BITSFR0              0      0       0       1        0.0%
   243 ;;COMMON               0      0       0       1        0.0%
   244 ;;BITCOMMON            0      0       0       0        0.0%
   245 ;;EEDATA              80      0       0       0        0.0%
   246                           
   247                           
   248 ;; *************** function _main *****************
   249 ;; Defined at:
   250 ;;		line 96 in file "C:\Users\Gaurav\Documents\GitHub\IR-Remote-Control\NEC IR Receiver UART output\main.c"
   251 ;; Parameters:    Size  Location     Type
   252 ;;		None
   253 ;; Auto vars:     Size  Location     Type
   254 ;;		None
   255 ;; Return value:  Size  Location     Type
   256 ;;		None               void
   257 ;; Registers used:
   258 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   259 ;; Tracked objects:
   260 ;;		On entry : 17F/0
   261 ;;		On exit  : 20/0
   262 ;;		Unchanged: 0/0
   263 ;; Data sizes:     COMMON   BANK0
   264 ;;      Params:         0       0
   265 ;;      Locals:         0       0
   266 ;;      Temps:          0       1
   267 ;;      Totals:         0       1
   268 ;;Total ram usage:        1 bytes
   269 ;; Hardware stack levels required when called:    3
   270 ;; This function calls:
   271 ;;		_UART_Transmit
   272 ;; This function is called by:
   273 ;;		Startup code after reset
   274 ;; This function uses a non-reentrant model
   275 ;;
   276  00CA                     _main:	
   277                           
   278                           ;main.c: 98: CMCON=0x7;
   279                           
   280                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   281  00CA  3007               	movlw	7
   282  00CB  0099               	movwf	25	;volatile
   283                           
   284                           ;main.c: 99: ANSEL=0x00;
   285  00CC  1683               	bsf	3,5	;RP0=1, select bank1
   286  00CD  019F               	clrf	31	;volatile
   287                           
   288                           ;main.c: 100: TRISIO=0x8;
   289  00CE  3008               	movlw	8
   290  00CF  0085               	movwf	5	;volatile
   291                           
   292                           ;main.c: 101: GPIObits.GPIO4=1;
   293  00D0  1283               	bcf	3,5	;RP0=0, select bank0
   294  00D1  1605               	bsf	5,4	;volatile
   295                           
   296                           ;main.c: 102: TMR0 = 0;
   297  00D2  0181               	clrf	1	;volatile
   298                           
   299                           ;main.c: 103: OPTION_REG = 0x88;
   300  00D3  3088               	movlw	136
   301  00D4  1683               	bsf	3,5	;RP0=1, select bank1
   302  00D5  0081               	movwf	1	;volatile
   303                           
   304                           ;main.c: 106: IOC = 0x8;
   305  00D6  3008               	movlw	8
   306  00D7  0096               	movwf	22	;volatile
   307                           
   308                           ;main.c: 107: INTCONbits.T0IE = 1;
   309  00D8  168B               	bsf	11,5	;volatile
   310                           
   311                           ;main.c: 108: INTCONbits.T0IF = 0;
   312  00D9  110B               	bcf	11,2	;volatile
   313                           
   314                           ;main.c: 109: INTCONbits.GPIE = 1;
   315  00DA  158B               	bsf	11,3	;volatile
   316                           
   317                           ;main.c: 110: INTCONbits.GPIF = 0;
   318  00DB  100B               	bcf	11,0	;volatile
   319                           
   320                           ;main.c: 111: INTCONbits.PEIE = 1;
   321  00DC  170B               	bsf	11,6	;volatile
   322                           
   323                           ;main.c: 112: INTCONbits.GIE = 1;
   324  00DD  178B               	bsf	11,7	;volatile
   325                           
   326                           ;main.c: 116: EEADR = 0x00;
   327  00DE  019B               	clrf	27	;volatile
   328                           
   329                           ;main.c: 117: EECON1bits.RD = 1;
   330  00DF  141C               	bsf	28,0	;volatile
   331                           
   332                           ;main.c: 118: GPIO = EEDATA;
   333  00E0  081A               	movf	26,w	;volatile
   334  00E1  1283               	bcf	3,5	;RP0=0, select bank0
   335  00E2  0085               	movwf	5	;volatile
   336  00E3                     l1513:	
   337                           
   338                           ;main.c: 121: {
   339                           ;main.c: 123: if(dataready)
   340  00E3  0829               	movf	_dataready,w
   341  00E4  1903               	btfsc	3,2
   342  00E5  28E3               	goto	l1513
   343  00E6  2908               	goto	l1525
   344  00E7                     l1517:	
   345  00E7  3000               	movlw	0
   346  00E8  1C05               	btfss	5,0	;volatile
   347  00E9  3001               	movlw	1
   348  00EA  00B9               	movwf	??_main
   349  00EB  0805               	movf	5,w	;volatile
   350  00EC  0639               	xorwf	??_main,w
   351  00ED  39FE               	andlw	-2
   352  00EE  2901               	goto	L2
   353  00EF                     l1519:	
   354                           ;main.c: 136: break;
   355                           
   356  00EF  3000               	movlw	0
   357  00F0  1C85               	btfss	5,1	;volatile
   358  00F1  3001               	movlw	1
   359  00F2  00B9               	movwf	??_main
   360  00F3  0DB9               	rlf	??_main,f
   361  00F4  0805               	movf	5,w	;volatile
   362  00F5  0639               	xorwf	??_main,w
   363  00F6  39FD               	andlw	-3
   364  00F7  2901               	goto	L2
   365  00F8                     l1521:	
   366                           ;main.c: 138: break;
   367                           
   368  00F8  3000               	movlw	0
   369  00F9  1D05               	btfss	5,2	;volatile
   370  00FA  3001               	movlw	1
   371  00FB  00B9               	movwf	??_main
   372  00FC  0DB9               	rlf	??_main,f
   373  00FD  0DB9               	rlf	??_main,f
   374  00FE  0805               	movf	5,w	;volatile
   375  00FF  0639               	xorwf	??_main,w
   376  0100  39FB               	andlw	-5
   377  0101                     L2:	
   378  0101  0639               	xorwf	??_main,w
   379  0102  0085               	movwf	5	;volatile
   380                           
   381                           ;main.c: 140: break;
   382  0103  2916               	goto	l1527
   383  0104                     l382:	
   384                           ;main.c: 143: case 0xB0: GPIObits.GPIO0 = 0;
   385                           
   386  0104  1005               	bcf	5,0	;volatile
   387                           
   388                           ;main.c: 144: GPIObits.GPIO1 = 0;
   389  0105  1085               	bcf	5,1	;volatile
   390                           
   391                           ;main.c: 145: GPIObits.GPIO2 = 0;
   392  0106  1105               	bcf	5,2	;volatile
   393                           
   394                           ;main.c: 147: break;
   395  0107  2916               	goto	l1527
   396  0108                     l1525:	
   397  0108  0828               	movf	_command,w
   398                           
   399                           ; Switch size 1, requested type "space"
   400                           ; Number of cases is 4, Range of values is 80 to 248
   401                           ; switch strategies available:
   402                           ; Name         Instructions Cycles
   403                           ; simple_byte           13     7 (average)
   404                           ; direct_byte          178     9 (fixed)
   405                           ; jumptable            263     9 (fixed)
   406                           ;	Chosen strategy is simple_byte
   407  0109  3A50               	xorlw	80	; case 80
   408  010A  1903               	skipnz
   409  010B  28E7               	goto	l1517
   410  010C  3AE0               	xorlw	224	; case 176
   411  010D  1903               	skipnz
   412  010E  2904               	goto	l382
   413  010F  3A68               	xorlw	104	; case 216
   414  0110  1903               	skipnz
   415  0111  28EF               	goto	l1519
   416  0112  3A20               	xorlw	32	; case 248
   417  0113  1903               	skipnz
   418  0114  28F8               	goto	l1521
   419  0115  2916               	goto	l1527
   420  0116                     l1527:	
   421                           
   422                           ;main.c: 151: UART_Transmit(address);
   423  0116  0827               	movf	_address,w
   424  0117  212C               	fcall	_UART_Transmit
   425                           
   426                           ;main.c: 152: UART_Transmit(command);
   427  0118  1283               	bcf	3,5	;RP0=0, select bank0
   428  0119  0828               	movf	_command,w
   429  011A  212C               	fcall	_UART_Transmit
   430                           
   431                           ;main.c: 154: EEADR = 0x00;
   432  011B  1683               	bsf	3,5	;RP0=1, select bank1
   433  011C  019B               	clrf	27	;volatile
   434                           
   435                           ;main.c: 155: EEDATA = GPIO;
   436  011D  1283               	bcf	3,5	;RP0=0, select bank0
   437  011E  0805               	movf	5,w	;volatile
   438  011F  1683               	bsf	3,5	;RP0=1, select bank1
   439  0120  009A               	movwf	26	;volatile
   440                           
   441                           ;main.c: 156: EECON1bits.WREN = 1;
   442  0121  151C               	bsf	28,2	;volatile
   443                           
   444                           ;main.c: 157: INTCONbits.GIE = 0;
   445  0122  138B               	bcf	11,7	;volatile
   446                           
   447                           ;main.c: 158: EECON2 = 0x55;
   448  0123  3055               	movlw	85
   449  0124  009D               	movwf	29	;volatile
   450                           
   451                           ;main.c: 159: EECON2 = 0xAA;
   452  0125  30AA               	movlw	170
   453  0126  009D               	movwf	29	;volatile
   454                           
   455                           ;main.c: 160: EECON1bits.WR = 1;
   456  0127  149C               	bsf	28,1	;volatile
   457                           
   458                           ;main.c: 161: INTCONbits.GIE = 1;
   459  0128  178B               	bsf	11,7	;volatile
   460                           
   461                           ;main.c: 163: dataready=0;
   462  0129  1283               	bcf	3,5	;RP0=0, select bank0
   463  012A  01A9               	clrf	_dataready
   464  012B  28E3               	goto	l1513
   465  012C                     __end_of_main:	
   466                           
   467                           	psect	text123
   468  012C                     __ptext123:	
   469 ;; =============== function _main ends ============
   470                           
   471                           
   472 ;; *************** function _UART_Transmit *****************
   473 ;; Defined at:
   474 ;;		line 331 in file "C:\Users\Gaurav\Documents\GitHub\IR-Remote-Control\NEC IR Receiver UART output\main.c"
   475 ;; Parameters:    Size  Location     Type
   476 ;;  DataValue       1    wreg     unsigned char 
   477 ;; Auto vars:     Size  Location     Type
   478 ;;  DataValue       1   10[BANK0 ] unsigned char 
   479 ;;  i               1   11[BANK0 ] unsigned char 
   480 ;; Return value:  Size  Location     Type
   481 ;;		None               void
   482 ;; Registers used:
   483 ;;		wreg, status,2, status,0
   484 ;; Tracked objects:
   485 ;;		On entry : 20/0
   486 ;;		On exit  : 0/0
   487 ;;		Unchanged: 0/0
   488 ;; Data sizes:     COMMON   BANK0
   489 ;;      Params:         0       0
   490 ;;      Locals:         0       2
   491 ;;      Temps:          0       1
   492 ;;      Totals:         0       3
   493 ;;Total ram usage:        3 bytes
   494 ;; Hardware stack levels used:    1
   495 ;; Hardware stack levels required when called:    2
   496 ;; This function calls:
   497 ;;		Nothing
   498 ;; This function is called by:
   499 ;;		_main
   500 ;; This function uses a non-reentrant model
   501 ;;
   502  012C                     _UART_Transmit:	
   503                           
   504                           ; Regs used in _UART_Transmit: [wreg+status,2+status,0]
   505                           ;UART_Transmit@DataValue stored from wreg
   506  012C  00B7               	movwf	UART_Transmit@DataValue
   507                           
   508                           ;main.c: 341: GPIObits.GPIO4 = 0;
   509  012D  1205               	bcf	5,4	;volatile
   510                           
   511                           ;main.c: 342: _delay((unsigned long)(((1000000/9600))*(40000000/4000000.0)));
   512  012E  30CF               	movlw	207
   513  012F  00B6               	movwf	??_UART_Transmit
   514  0130                     u457:	
   515  0130  2931               	nop2
   516  0131  0BB6               	decfsz	??_UART_Transmit,f
   517  0132  2930               	goto	u457
   518  0133  2934               	nop2	;nop
   519  0134  2935               	nop2	;nop
   520                           
   521                           ;main.c: 344: for ( unsigned char i = 0; i < 8; i++ )
   522  0135  1283               	bcf	3,5	;RP0=0, select bank0
   523  0136  01B8               	clrf	UART_Transmit@i
   524  0137                     l1473:	
   525                           
   526                           ;main.c: 345: {
   527                           ;main.c: 347: if( ((DataValue>>i)&0x1) == 0x1 )
   528  0137  0837               	movf	UART_Transmit@DataValue,w
   529  0138  00B6               	movwf	??_UART_Transmit
   530  0139  0A38               	incf	UART_Transmit@i,w
   531  013A  293D               	goto	u414
   532  013B                     u415:	
   533  013B  1003               	clrc
   534  013C  0CB6               	rrf	??_UART_Transmit,f
   535  013D                     u414:	
   536  013D  3EFF               	addlw	-1
   537  013E  1D03               	skipz
   538  013F  293B               	goto	u415
   539  0140  1C36               	btfss	??_UART_Transmit,0
   540  0141  2944               	goto	l420
   541                           
   542                           ;main.c: 348: {
   543                           ;main.c: 349: GPIObits.GPIO4 = 1;
   544  0142  1605               	bsf	5,4	;volatile
   545                           
   546                           ;main.c: 350: }
   547  0143  2945               	goto	l1477
   548  0144                     l420:	
   549                           
   550                           ;main.c: 351: else
   551                           ;main.c: 352: {
   552                           ;main.c: 353: GPIObits.GPIO4 = 0;
   553  0144  1205               	bcf	5,4	;volatile
   554  0145                     l1477:	
   555                           
   556                           ;main.c: 354: }
   557                           ;main.c: 356: _delay((unsigned long)(((1000000/9600))*(40000000/4000000.0)));
   558  0145  30CF               	movlw	207
   559  0146  00B6               	movwf	??_UART_Transmit
   560  0147                     u467:	
   561  0147  2948               	nop2
   562  0148  0BB6               	decfsz	??_UART_Transmit,f
   563  0149  2947               	goto	u467
   564  014A  294B               	nop2	;nop
   565  014B  294C               	nop2	;nop
   566  014C  3008               	movlw	8
   567  014D  1283               	bcf	3,5	;RP0=0, select bank0
   568  014E  0AB8               	incf	UART_Transmit@i,f
   569  014F  0238               	subwf	UART_Transmit@i,w
   570  0150  1C03               	skipc
   571  0151  2937               	goto	l1473
   572                           
   573                           ;main.c: 357: }
   574                           ;main.c: 360: GPIObits.GPIO4 = 1;
   575  0152  1605               	bsf	5,4	;volatile
   576                           
   577                           ;main.c: 361: _delay((unsigned long)(((1000000/9600))*(40000000/4000000.0)));
   578  0153  30CF               	movlw	207
   579  0154  00B6               	movwf	??_UART_Transmit
   580  0155                     u477:	
   581  0155  2956               	nop2
   582  0156  0BB6               	decfsz	??_UART_Transmit,f
   583  0157  2955               	goto	u477
   584  0158  2959               	nop2	;nop
   585  0159  295A               	nop2	;nop
   586  015A  0008               	return
   587  015B                     __end_of_UART_Transmit:	
   588                           
   589                           	psect	text124
   590  015B                     __ptext124:	
   591 ;; =============== function _UART_Transmit ends ============
   592                           
   593                           
   594 ;; *************** function _t0intr *****************
   595 ;; Defined at:
   596 ;;		line 76 in file "C:\Users\Gaurav\Documents\GitHub\IR-Remote-Control\NEC IR Receiver UART output\main.c"
   597 ;; Parameters:    Size  Location     Type
   598 ;;		None
   599 ;; Auto vars:     Size  Location     Type
   600 ;;		None
   601 ;; Return value:  Size  Location     Type
   602 ;;		None               void
   603 ;; Registers used:
   604 ;;		wreg, status,2, status,0, pclath, cstack
   605 ;; Tracked objects:
   606 ;;		On entry : 0/0
   607 ;;		On exit  : 20/0
   608 ;;		Unchanged: FFFDF/0
   609 ;; Data sizes:     COMMON   BANK0
   610 ;;      Params:         0       0
   611 ;;      Locals:         0       0
   612 ;;      Temps:          0       2
   613 ;;      Totals:         0       2
   614 ;;Total ram usage:        2 bytes
   615 ;; Hardware stack levels used:    1
   616 ;; Hardware stack levels required when called:    1
   617 ;; This function calls:
   618 ;;		_timerInterruptIsr
   619 ;;		_interruptOnChangeIsr
   620 ;; This function is called by:
   621 ;;		Interrupt level 1
   622 ;; This function uses a non-reentrant model
   623 ;;
   624  015B                     _t0intr:	
   625                           
   626                           ;main.c: 77: if(INTCONbits.T0IF)
   627  015B  1D0B               	btfss	11,2	;volatile
   628  015C  2960               	goto	i1l369
   629                           
   630                           ;main.c: 78: {
   631                           ;main.c: 79: timerInterruptIsr();
   632  015D  216D               	fcall	_timerInterruptIsr
   633                           
   634                           ;main.c: 80: INTCONbits.T0IF =0;
   635  015E  110B               	bcf	11,2	;volatile
   636                           
   637                           ;main.c: 81: }
   638  015F  2966               	goto	i1l372
   639  0160                     i1l369:	
   640                           
   641                           ;main.c: 82: else if (INTCONbits.GPIF)
   642  0160  1C0B               	btfss	11,0	;volatile
   643  0161  2966               	goto	i1l372
   644                           
   645                           ;main.c: 83: {
   646                           ;main.c: 84: GPIObits.GPIO5=1;
   647  0162  1685               	bsf	5,5	;volatile
   648                           
   649                           ;main.c: 85: interruptOnChangeIsr();
   650  0163  2010               	fcall	_interruptOnChangeIsr
   651                           
   652                           ;main.c: 86: INTCONbits.GPIF =0;
   653  0164  100B               	bcf	11,0	;volatile
   654                           
   655                           ;main.c: 87: GPIObits.GPIO5=0;
   656  0165  1285               	bcf	5,5	;volatile
   657  0166                     i1l372:	
   658  0166  0835               	movf	??_t0intr+1,w
   659  0167  008A               	movwf	10
   660  0168  0E34               	swapf	??_t0intr^0,w
   661  0169  0083               	movwf	3
   662  016A  0EDE               	swapf	94,f
   663  016B  0E5E               	swapf	94,w
   664  016C  0009               	retfie
   665  016D                     __end_of_t0intr:	
   666                           
   667                           	psect	intentry
   668  0004                     __pintentry:	
   669                           ; Regs used in _t0intr: [wreg+status,2+status,0+pclath+cstack]
   670                           
   671  0004                     interrupt_function:	
   672  005E                     saved_w	set	btemp
   673  0004  00DE               	movwf	btemp
   674  0005  0E03               	swapf	3,w
   675  0006  1283               	bcf	3,5	;RP0=0, select bank0
   676  0007  00B4               	movwf	??_t0intr
   677  0008  080A               	movf	10,w
   678  0009  00B5               	movwf	??_t0intr+1
   679  000A  295B               	ljmp	_t0intr
   680                           
   681                           	psect	text125
   682  0010                     __ptext125:	
   683 ;; =============== function _t0intr ends ============
   684                           
   685                           
   686 ;; *************** function _interruptOnChangeIsr *****************
   687 ;; Defined at:
   688 ;;		line 172 in file "C:\Users\Gaurav\Documents\GitHub\IR-Remote-Control\NEC IR Receiver UART output\main.c"
   689 ;; Parameters:    Size  Location     Type
   690 ;;		None
   691 ;; Auto vars:     Size  Location     Type
   692 ;;  tdiff           3    3[BANK0 ] unsigned um
   693 ;;  pin             1    6[BANK0 ] unsigned char 
   694 ;; Return value:  Size  Location     Type
   695 ;;		None               void
   696 ;; Registers used:
   697 ;;		wreg, status,2, status,0
   698 ;; Tracked objects:
   699 ;;		On entry : 20/0
   700 ;;		On exit  : 20/0
   701 ;;		Unchanged: FFFDF/0
   702 ;; Data sizes:     COMMON   BANK0
   703 ;;      Params:         0       0
   704 ;;      Locals:         0       4
   705 ;;      Temps:          0       3
   706 ;;      Totals:         0       7
   707 ;;Total ram usage:        7 bytes
   708 ;; Hardware stack levels used:    1
   709 ;; This function calls:
   710 ;;		Nothing
   711 ;; This function is called by:
   712 ;;		_t0intr
   713 ;; This function uses a non-reentrant model
   714 ;;
   715  0010                     _interruptOnChangeIsr:	
   716                           
   717                           ;main.c: 174: unsigned short long tdiff;
   718                           ;main.c: 175: unsigned char pin;
   719                           ;main.c: 176: static unsigned long rxbuffer;
   720                           ;main.c: 179: tdiff = ((timer<<8)+TMR0) ;
   721                           
   722                           ; Regs used in _interruptOnChangeIsr: [wreg+status,2+status,0]
   723  0010  0824               	movf	_timer,w
   724  0011  00AD               	movwf	??_interruptOnChangeIsr
   725  0012  0825               	movf	_timer+1,w
   726  0013  00AE               	movwf	??_interruptOnChangeIsr+1
   727  0014  0826               	movf	_timer+2,w
   728  0015  00AF               	movwf	??_interruptOnChangeIsr+2
   729  0016  082E               	movf	??_interruptOnChangeIsr+1,w
   730  0017  00AF               	movwf	??_interruptOnChangeIsr+2
   731  0018  082D               	movf	??_interruptOnChangeIsr,w
   732  0019  00AE               	movwf	??_interruptOnChangeIsr+1
   733  001A  01AD               	clrf	??_interruptOnChangeIsr
   734  001B  082D               	movf	??_interruptOnChangeIsr,w
   735  001C  00B0               	movwf	interruptOnChangeIsr@tdiff
   736  001D  082E               	movf	??_interruptOnChangeIsr+1,w
   737  001E  00B1               	movwf	interruptOnChangeIsr@tdiff+1
   738  001F  082F               	movf	??_interruptOnChangeIsr+2,w
   739  0020  00B2               	movwf	interruptOnChangeIsr@tdiff+2
   740  0021  0801               	movf	1,w	;volatile
   741  0022  07B0               	addwf	interruptOnChangeIsr@tdiff,f
   742  0023  3001               	movlw	1
   743  0024  1803               	skipnc
   744  0025  07B1               	addwf	interruptOnChangeIsr@tdiff+1,f
   745  0026  1803               	skipnc
   746  0027  07B2               	addwf	interruptOnChangeIsr@tdiff+2,f
   747                           
   748                           ;main.c: 181: pin = GPIObits.GPIO3;
   749  0028  3000               	movlw	0
   750  0029  1985               	btfsc	5,3	;volatile
   751  002A  3001               	movlw	1
   752  002B  00B3               	movwf	interruptOnChangeIsr@pin
   753                           
   754                           ;main.c: 182: TMR0 = 0;
   755  002C  0181               	clrf	1	;volatile
   756                           
   757                           ;main.c: 183: timer = 0;
   758  002D  01A4               	clrf	_timer
   759  002E  01A5               	clrf	_timer+1
   760  002F  01A6               	clrf	_timer+2
   761                           
   762                           ;main.c: 213: if ((tdiff>PREPULSE) && (tdiff<TIMEOUT) )
   763  0030  083A               	movf	_PREPULSE,w
   764  0031  00AD               	movwf	??_interruptOnChangeIsr
   765  0032  083B               	movf	_PREPULSE+1,w
   766  0033  00AE               	movwf	??_interruptOnChangeIsr+1
   767  0034  01AF               	clrf	??_interruptOnChangeIsr+2
   768  0035  0832               	movf	interruptOnChangeIsr@tdiff+2,w
   769  0036  022F               	subwf	??_interruptOnChangeIsr+2,w
   770  0037  1D03               	skipz
   771  0038  283F               	goto	u26_25
   772  0039  0831               	movf	interruptOnChangeIsr@tdiff+1,w
   773  003A  022E               	subwf	??_interruptOnChangeIsr+1,w
   774  003B  1D03               	skipz
   775  003C  283F               	goto	u26_25
   776  003D  0830               	movf	interruptOnChangeIsr@tdiff,w
   777  003E  022D               	subwf	??_interruptOnChangeIsr,w
   778  003F                     u26_25:	
   779  003F  1803               	skipnc
   780  0040  28B3               	goto	i1l1445
   781  0041  083C               	movf	_TIMEOUT,w
   782  0042  00AD               	movwf	??_interruptOnChangeIsr
   783  0043  083D               	movf	_TIMEOUT+1,w
   784  0044  00AE               	movwf	??_interruptOnChangeIsr+1
   785  0045  01AF               	clrf	??_interruptOnChangeIsr+2
   786  0046  082F               	movf	??_interruptOnChangeIsr+2,w
   787  0047  0232               	subwf	interruptOnChangeIsr@tdiff+2,w
   788  0048  1D03               	skipz
   789  0049  2850               	goto	u27_25
   790  004A  082E               	movf	??_interruptOnChangeIsr+1,w
   791  004B  0231               	subwf	interruptOnChangeIsr@tdiff+1,w
   792  004C  1D03               	skipz
   793  004D  2850               	goto	u27_25
   794  004E  082D               	movf	??_interruptOnChangeIsr,w
   795  004F  0230               	subwf	interruptOnChangeIsr@tdiff,w
   796  0050                     u27_25:	
   797  0050  1803               	skipnc
   798  0051  28B3               	goto	i1l1445
   799                           
   800                           ;main.c: 214: {
   801                           ;main.c: 219: if(necpoj==1 || necpoj==2)
   802  0052  032A               	decf	_necpoj,w
   803  0053  1903               	skipnz
   804  0054  2859               	goto	i1l1387
   805  0055  082A               	movf	_necpoj,w
   806  0056  3A02               	xorlw	2
   807  0057  1D03               	skipz
   808  0058  287A               	goto	i1l1413
   809  0059                     i1l1387:	
   810                           
   811                           ;main.c: 220: {
   812                           ;main.c: 222: if((pin==1) && (necpoj==1))
   813  0059  0B33               	decfsz	interruptOnChangeIsr@pin,w
   814  005A  2867               	goto	i1l1397
   815  005B  0B2A               	decfsz	_necpoj,w
   816  005C  2867               	goto	i1l1397
   817  005D  3092               	movlw	146
   818                           
   819                           ;main.c: 223: {
   820                           ;main.c: 224: necpoj++;
   821  005E  0AAA               	incf	_necpoj,f
   822                           
   823                           ;main.c: 225: TIMEOUT = 5522;
   824  005F  00BC               	movwf	_TIMEOUT
   825  0060  3015               	movlw	21
   826  0061  00BD               	movwf	_TIMEOUT+1
   827                           
   828                           ;main.c: 226: PREPULSE = 3012;
   829  0062  30C4               	movlw	196
   830  0063  00BA               	movwf	_PREPULSE
   831  0064  300B               	movlw	11
   832  0065  00BB               	movwf	_PREPULSE+1
   833                           
   834                           ;main.c: 227: }
   835  0066  0008               	return
   836  0067                     i1l1397:	
   837                           
   838                           ;main.c: 228: else if((pin==0)&& (necpoj ==2))
   839  0067  08B3               	movf	interruptOnChangeIsr@pin,f
   840  0068  1D03               	skipz
   841  0069  2877               	goto	i1l1407
   842  006A  082A               	movf	_necpoj,w
   843  006B  3A02               	xorlw	2
   844  006C  1D03               	skipz
   845  006D  2877               	goto	i1l1407
   846  006E  3005               	movlw	5
   847                           
   848                           ;main.c: 229: {
   849                           ;main.c: 230: necpoj++;
   850  006F  0AAA               	incf	_necpoj,f
   851                           
   852                           ;main.c: 232: TIMEOUT = 2309;
   853  0070  00BC               	movwf	_TIMEOUT
   854  0071  3009               	movlw	9
   855  0072  00BD               	movwf	_TIMEOUT+1
   856                           
   857                           ;main.c: 233: PREPULSE = 200;
   858  0073  30C8               	movlw	200
   859  0074  00BA               	movwf	_PREPULSE
   860  0075  01BB               	clrf	_PREPULSE+1
   861                           
   862                           ;main.c: 235: }
   863  0076  0008               	return
   864  0077                     i1l1407:	
   865                           
   866                           ;main.c: 236: else
   867                           ;main.c: 237: {
   868                           ;main.c: 238: necpoj = 0;
   869  0077  01AA               	clrf	_necpoj
   870  0078                     i1l1409:	
   871                           
   872                           ;main.c: 239: TIMEOUT = 11044;
   873                           
   874                           ;main.c: 240: PREPULSE = 8032;
   875  0078  20C1               	fcall	PL2	;call to abstracted procedure
   876  0079  0008               	return
   877  007A                     i1l1413:	
   878                           
   879                           ;main.c: 243: else if(necpoj>2)
   880  007A  3003               	movlw	3
   881  007B  022A               	subwf	_necpoj,w
   882  007C  1C03               	skipc
   883  007D  28B1               	goto	i1l1443
   884                           
   885                           ;main.c: 244: {
   886                           ;main.c: 246: necpoj++;
   887  007E  0AAA               	incf	_necpoj,f
   888                           
   889                           ;main.c: 248: if(necpoj&0x01)
   890  007F  1C2A               	btfss	_necpoj,0
   891  0080  2892               	goto	i1l1425
   892  0081  3000               	movlw	0
   893                           
   894                           ;main.c: 250: {
   895                           ;main.c: 251: rxbuffer=rxbuffer<<1;
   896  0082  1003               	clrc
   897  0083  0DA0               	rlf	interruptOnChangeIsr@rxbuffer,f
   898  0084  0DA1               	rlf	interruptOnChangeIsr@rxbuffer+1,f
   899  0085  0DA2               	rlf	interruptOnChangeIsr@rxbuffer+2,f
   900  0086  0DA3               	rlf	interruptOnChangeIsr@rxbuffer+3,f
   901                           
   902                           ;main.c: 252: if(tdiff>1250)
   903  0087  0232               	subwf	interruptOnChangeIsr@tdiff+2,w
   904  0088  1D03               	skipz
   905  0089  2890               	goto	u36_25
   906  008A  3004               	movlw	4
   907  008B  0231               	subwf	interruptOnChangeIsr@tdiff+1,w
   908  008C  1D03               	skipz
   909  008D  2890               	goto	u36_25
   910  008E  30E3               	movlw	227
   911  008F  0230               	subwf	interruptOnChangeIsr@tdiff,w
   912  0090                     u36_25:	
   913  0090  1803               	btfsc	3,0
   914                           
   915                           ;main.c: 254: {
   916                           ;main.c: 255: rxbuffer = rxbuffer | 0x1;
   917  0091  1420               	bsf	interruptOnChangeIsr@rxbuffer,0
   918  0092                     i1l1425:	
   919                           ;main.c: 257: }
   920                           
   921                           
   922                           ;main.c: 262: }
   923                           ;main.c: 264: }
   924                           ;main.c: 266: if(necpoj >66)
   925  0092  3043               	movlw	67
   926  0093  022A               	subwf	_necpoj,w
   927  0094  1C03               	skipc
   928  0095  0008               	return
   929                           
   930                           ;main.c: 267: {
   931                           ;main.c: 269: address = (rxbuffer>>24)& 0xFF;
   932  0096  0823               	movf	interruptOnChangeIsr@rxbuffer+3,w
   933  0097  00A7               	movwf	_address
   934                           
   935                           ;main.c: 270: notaddress = (rxbuffer>>16)& 0xFF;
   936  0098  0822               	movf	interruptOnChangeIsr@rxbuffer+2,w
   937  0099  00AB               	movwf	_notaddress
   938                           
   939                           ;main.c: 271: command = (rxbuffer>>8) & 0xFF;
   940  009A  0821               	movf	interruptOnChangeIsr@rxbuffer+1,w
   941  009B  00A8               	movwf	_command
   942                           
   943                           ;main.c: 272: notcommand = (rxbuffer) & 0xFF;
   944  009C  0820               	movf	interruptOnChangeIsr@rxbuffer,w
   945  009D  00AC               	movwf	_notcommand
   946                           
   947                           ;main.c: 273: rxbuffer=0;
   948  009E  01A0               	clrf	interruptOnChangeIsr@rxbuffer
   949  009F  01A1               	clrf	interruptOnChangeIsr@rxbuffer+1
   950  00A0  01A2               	clrf	interruptOnChangeIsr@rxbuffer+2
   951  00A1  01A3               	clrf	interruptOnChangeIsr@rxbuffer+3
   952                           
   953                           ;main.c: 275: if((!(address & notaddress)) && (!(command & notcommand)))
   954  00A2  0827               	movf	_address,w
   955  00A3  052B               	andwf	_notaddress,w
   956  00A4  1D03               	btfss	3,2
   957  00A5  28AD               	goto	i1l1437
   958  00A6  0828               	movf	_command,w
   959  00A7  052C               	andwf	_notcommand,w
   960  00A8  1D03               	btfss	3,2
   961  00A9  28AD               	goto	i1l1437
   962                           
   963                           ;main.c: 276: {
   964                           ;main.c: 277: dataready =1;
   965  00AA  01A9               	clrf	_dataready
   966  00AB  0AA9               	incf	_dataready,f
   967                           
   968                           ;main.c: 278: }
   969  00AC  28AE               	goto	i1l1439
   970  00AD                     i1l1437:	
   971                           
   972                           ;main.c: 279: else
   973                           ;main.c: 280: {
   974                           ;main.c: 281: dataready=0;
   975  00AD  01A9               	clrf	_dataready
   976  00AE                     i1l1439:	
   977                           
   978                           ;main.c: 282: }
   979                           ;main.c: 283: TIMEOUT = 11044;
   980                           
   981                           ;main.c: 284: PREPULSE = 8032;
   982  00AE  20C1               	fcall	PL2	;call to abstracted procedure
   983                           
   984                           ;main.c: 285: necpoj=0;
   985  00AF  01AA               	clrf	_necpoj
   986  00B0  0008               	return
   987  00B1                     i1l1443:	
   988                           
   989                           ;main.c: 289: else
   990                           ;main.c: 290: {
   991                           ;main.c: 292: TIMEOUT = 11044;
   992                           
   993                           ;main.c: 293: PREPULSE = 8032;
   994  00B1  20C1               	fcall	PL2	;call to abstracted procedure
   995  00B2  0008               	return
   996  00B3                     i1l1445:	
   997                           ;main.c: 294: }
   998                           ;main.c: 299: }
   999                           
  1000                           
  1001                           ;main.c: 300: else
  1002                           ;main.c: 301: {
  1003                           ;main.c: 303: if(pin==0)
  1004  00B3  08B3               	movf	interruptOnChangeIsr@pin,f
  1005  00B4  1D03               	skipz
  1006  00B5  28B9               	goto	i1l1449
  1007                           
  1008                           ;main.c: 304: {
  1009                           ;main.c: 305: necpoj = 1;
  1010  00B6  01AA               	clrf	_necpoj
  1011  00B7  0AAA               	incf	_necpoj,f
  1012                           
  1013                           ;main.c: 306: }
  1014  00B8  28BA               	goto	i1l1451
  1015  00B9                     i1l1449:	
  1016                           
  1017                           ;main.c: 307: else
  1018                           ;main.c: 308: {
  1019                           ;main.c: 309: necpoj = 0;
  1020  00B9  01AA               	clrf	_necpoj
  1021  00BA                     i1l1451:	
  1022                           
  1023                           ;main.c: 310: }
  1024                           ;main.c: 312: address = 0xFF;
  1025  00BA  30FF               	movlw	255
  1026  00BB  00A7               	movwf	_address
  1027                           
  1028                           ;main.c: 313: notaddress = 0xFF;
  1029  00BC  00AB               	movwf	_notaddress
  1030                           
  1031                           ;main.c: 314: command = 0xFF;
  1032  00BD  00A8               	movwf	_command
  1033                           
  1034                           ;main.c: 315: notcommand = 0xFF;
  1035  00BE  00AC               	movwf	_notcommand
  1036                           
  1037                           ;main.c: 316: dataready = 0x000;
  1038  00BF  01A9               	clrf	_dataready
  1039  00C0  2878               	goto	i1l1409
  1040  00C1                     __end_of_interruptOnChangeIsr:	
  1041  00C1                     PL2:	
  1042  00C1  3024               	movlw	36
  1043  00C2  00BC               	movwf	_TIMEOUT
  1044  00C3  302B               	movlw	43
  1045  00C4  00BD               	movwf	_TIMEOUT+1
  1046  00C5  3060               	movlw	96
  1047  00C6  00BA               	movwf	_PREPULSE
  1048  00C7  301F               	movlw	31
  1049  00C8  00BB               	movwf	_PREPULSE+1
  1050  00C9  0008               	return
  1051                           
  1052                           	psect	text126
  1053  016D                     __ptext126:	
  1054 ;; =============== function _interruptOnChangeIsr ends ============
  1055                           
  1056                           
  1057 ;; *************** function _timerInterruptIsr *****************
  1058 ;; Defined at:
  1059 ;;		line 324 in file "C:\Users\Gaurav\Documents\GitHub\IR-Remote-Control\NEC IR Receiver UART output\main.c"
  1060 ;; Parameters:    Size  Location     Type
  1061 ;;		None
  1062 ;; Auto vars:     Size  Location     Type
  1063 ;;		None
  1064 ;; Return value:  Size  Location     Type
  1065 ;;		None               void
  1066 ;; Registers used:
  1067 ;;		wreg, status,2, status,0
  1068 ;; Tracked objects:
  1069 ;;		On entry : 20/0
  1070 ;;		On exit  : 20/0
  1071 ;;		Unchanged: FFFDF/0
  1072 ;; Data sizes:     COMMON   BANK0
  1073 ;;      Params:         0       0
  1074 ;;      Locals:         0       0
  1075 ;;      Temps:          0       0
  1076 ;;      Totals:         0       0
  1077 ;;Total ram usage:        0 bytes
  1078 ;; Hardware stack levels used:    1
  1079 ;; This function calls:
  1080 ;;		Nothing
  1081 ;; This function is called by:
  1082 ;;		_t0intr
  1083 ;; This function uses a non-reentrant model
  1084 ;;
  1085  016D                     _timerInterruptIsr:	
  1086                           
  1087                           ;main.c: 325: if(timer<0xFFFF)
  1088                           
  1089                           ; Regs used in _timerInterruptIsr: [wreg+status,2+status,0]
  1090  016D  3000               	movlw	0
  1091  016E  0226               	subwf	_timer+2,w
  1092  016F  1D03               	skipz
  1093  0170  2977               	goto	u25_25
  1094  0171  30FF               	movlw	255
  1095  0172  0225               	subwf	_timer+1,w
  1096  0173  1D03               	skipz
  1097  0174  2977               	goto	u25_25
  1098  0175  30FF               	movlw	255
  1099  0176  0224               	subwf	_timer,w
  1100  0177                     u25_25:	
  1101  0177  1803               	skipnc
  1102  0178  0008               	return
  1103                           
  1104                           ;main.c: 326: timer++;
  1105  0179  0AA4               	incf	_timer,f
  1106  017A  1903               	skipnz
  1107  017B  0AA5               	incf	_timer+1,f
  1108  017C  1903               	skipnz
  1109  017D  0AA6               	incf	_timer+2,f
  1110  017E  0008               	return
  1111  017F                     __end_of_timerInterruptIsr:	
  1112                           
  1113                           	psect	text127
  1114  0000                     __ptext127:	
  1115 ;; =============== function _timerInterruptIsr ends ============
  1116                           
  1117  005E                     btemp	set	94	;btemp
  1118  005E                     wtemp0	set	94


HI-TECH Software PICC Macro Assembler V9.83 build 10920 
Symbol Table                                                                                   Thu Nov 20 21:28:38 2014

                           fsr 0004                            l420 0144                            l422 0000  
                          l382 0104                            _IOC 0096                            u414 013D  
                          u415 013B                            u457 0130                            u467 0147  
                          u477 0155                            indf 0000                           l1501 0000  
                         l1511 0000                           l1503 0000                           l1521 00F8  
                         l1513 00E3                           l1505 0000                           l1531 0000  
                         l1507 0000                           l1541 0000                           l1533 0000  
                         l1517 00E7                           l1525 0108                           l1509 0000  
                         l1463 0000                           l1543 0000                           l1535 0000  
                         l1519 00EF                           l1527 0116                           l1481 0000  
                         l1473 0137                           l1465 0000                           l1545 0000  
                         l1537 0000                           l1529 0000                           l1483 0000  
                         l1467 0000                           l1539 0000                           l1491 0000  
                         l1477 0145                           l1493 0000                           l1485 0000  
                         l1479 0000                           l1495 0000                           l1487 0000  
                         l1497 0000                           l1489 0000                           l1499 0000  
                         _GPIO 0005                           _TMR0 0001                           _main 00CA  
                         btemp 005E                           start 000B                          ?_main 002D  
                        _EEADR 009B                          _CMCON 0019                          _ANSEL 009F  
                        i1l372 0166                          i1l369 0160                          u25_25 0177  
                        u26_25 003F                          u27_25 0050                          u36_25 0090  
                        _timer 0024                          pclath 000A                          status 0003  
                        wtemp0 005E                   __end_of_main 012C           _interruptOnChangeIsr 0010  
                       ??_main 0039                         _EEDATA 009A                         _EECON2 009D  
                       i1l1411 0000                         i1l1403 0000                         i1l1421 0000  
                       i1l1405 0000                         i1l1413 007A                         i1l1431 0000  
                       i1l1407 0077                         i1l1441 0000                         i1l1425 0092  
                       i1l1417 0000                         i1l1409 0078                         i1l1451 00BA  
                       i1l1443 00B1                         i1l1363 0000                         i1l1355 0000  
                       i1l1453 0000                         i1l1437 00AD                         i1l1429 0000  
                       i1l1445 00B3                         i1l1373 0000                         i1l1365 0000  
                       i1l1455 0000                         i1l1439 00AE                         i1l1391 0000  
                       i1l1375 0000                         i1l1367 0000                         i1l1359 0000  
                       i1l1369 0000                         i1l1457 0000                         i1l1449 00B9  
                       i1l1393 0000                         i1l1377 0000                         i1l1395 0000  
                       i1l1387 0059                         i1l1379 0000                         i1l1389 0000  
                       i1l1397 0067                         _TRISIO 0085                         _t0intr 015B  
                       _necpoj 002A          ?_interruptOnChangeIsr 002D                         clrloop 018F  
                       saved_w 005E          __end_of_UART_Transmit 015B                 __pcstackCOMMON 0000  
                 __pidataBANK0 0000                     __pbssBANK0 0020                     __pmaintext 00CA  
                      ?_t0intr 002D         ??_interruptOnChangeIsr 002D                     __pintentry 0004  
                      _TIMEOUT 003C                __size_of_t0intr 0012                        _address 0027  
                      _command 0028           end_of_initialization 018C                 UART_Transmit@i 0038  
                   _notaddress 002B                     _notcommand 002C      interruptOnChangeIsr@tdiff 0030  
            _timerInterruptIsr 016D             ?_timerInterruptIsr 002D                 __end_of_t0intr 016D  
          ??_timerInterruptIsr 0000         UART_Transmit@DataValue 0037            start_initialization 017F  
    __end_of_timerInterruptIsr 017F                       ??_t0intr 0034                    __pdataBANK0 003A  
       __size_of_UART_Transmit 002F                  __pcstackBANK0 002D                      _dataready 0029  
                    __ptext123 012C                      __ptext124 015B                      __ptext125 0010  
                    __ptext126 016D                      __ptext127 0000  __size_of_interruptOnChangeIsr 00B1  
            interrupt_function 0004     __size_of_timerInterruptIsr 0012                       _GPIObits 0005  
                _UART_Transmit 012C                       _PREPULSE 003A   interruptOnChangeIsr@rxbuffer 0020  
                   _EECON1bits 009C                 ?_UART_Transmit 002D                  __size_of_main 0062  
                     clear_ram 018E                     _INTCONbits 000B                       intlevel1 0000  
              ??_UART_Transmit 0036                     _OPTION_REG 0081        interruptOnChangeIsr@pin 0033  
 __end_of_interruptOnChangeIsr 00C1  
