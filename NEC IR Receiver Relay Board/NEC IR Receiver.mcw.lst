

HI-TECH Software PIC PRO Macro Assembler V9.83 build 10920 
                                                                                               Thu Dec 12 20:12:29 2013

HI-TECH Software Omniscient Code Generator (PRO mode) build 10920
     1                           	processor	12F675
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	config,global,class=CONFIG,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	cinit,global,class=CODE,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,delta=2
    13                           	psect	text77,local,class=CODE,delta=2
    14                           	psect	intentry,global,class=CODE,delta=2
    15                           	psect	text78,local,class=CODE,delta=2
    16                           	psect	text79,local,class=CODE,delta=2
    17                           	psect	text80,local,class=CODE,delta=2
    18                           	psect	pa_nodes,global,class=CODE,delta=2
    19                           	dabs	1,0x5E,2
    20  000A                     	;#
    21                           
    22                           	psect	config
    23  2007  31D4               	dw	12756	;#
    24                           
    25                           	psect	idataBANK0
    26  0000                     __pidataBANK0:	
    27  0019                     _CMCON	set	25
    28  0005                     _GPIO	set	5
    29  0005                     _GPIObits	set	5
    30  000B                     _INTCONbits	set	11
    31  0001                     _TMR0	set	1
    32  009F                     _ANSEL	set	159
    33  009B                     _EEADR	set	155
    34  009C                     _EECON1bits	set	156
    35  009D                     _EECON2	set	157
    36  009A                     _EEDATA	set	154
    37  0096                     _IOC	set	150
    38  0081                     _OPTION_REG	set	129
    39  0085                     _TRISIO	set	133
    40                           
    41                           	psect	cinit
    42  0157                     start_initialization:	
    43  0157  3020               	movlw	low __pbssBANK0
    44                           
    45                           ; Clear objects allocated to BANK0
    46  0158  1383               	bcf	3,7	;select IRP bank0
    47  0159  0084               	movwf	4
    48  015A  302D               	movlw	low (__pbssBANK0+13)
    49  015B  2166               	fcall	clear_ram
    50                           
    51                           ;initializer for _PREPULSE
    52  015C  3060               	movlw	96
    53  015D  00B7               	movwf	__pdataBANK0& (0+127)
    54  015E  301F               	movlw	31
    55  015F  00B8               	movwf	(__pdataBANK0+1)& (0+127)
    56                           
    57                           ;initializer for _TIMEOUT
    58  0160  3024               	movlw	36
    59  0161  00B9               	movwf	(__pdataBANK0+2)& (0+127)
    60  0162  302B               	movlw	43
    61  0163  00BA               	movwf	(__pdataBANK0+3)& (0+127)
    62  0164                     end_of_initialization:	
    63                           ;End of C runtime variable initialization code
    64                           
    65  0164  0183               	clrf	3
    66  0165  28CA               	ljmp	_main	;jump to C main() function
    67                           
    68                           	psect	bssBANK0
    69  0020                     __pbssBANK0:	
    70  0020                     interruptOnChangeIsr@rxbuffer:	
    71  0020                     	ds	4
    72  0024                     _timer:	
    73  0024                     	ds	3
    74  0027                     _address:	
    75  0027                     	ds	1
    76  0028                     _command:	
    77  0028                     	ds	1
    78  0029                     _dataready:	
    79  0029                     	ds	1
    80  002A                     _necpoj:	
    81  002A                     	ds	1
    82  002B                     _notaddress:	
    83  002B                     	ds	1
    84  002C                     _notcommand:	
    85  002C                     	ds	1
    86                           
    87                           	psect	dataBANK0
    88  0037                     __pdataBANK0:	
    89  0037                     _PREPULSE:	
    90  0037                     	ds	2
    91  0039                     _TIMEOUT:	
    92  0039                     	ds	2
    93                           
    94                           	psect	clrtext
    95  0166                     clear_ram:	
    96                           ;	Called with FSR containing the base address, and
    97                           ;	W with the last address+1
    98                           
    99  0166  0064               	clrwdt	;clear the watchdog before getting into this loop
   100  0167                     clrloop:	
   101  0167  0180               	clrf	0	;clear RAM location pointed to by FSR
   102  0168  0A84               	incf	4,f	;increment pointer
   103  0169  0604               	xorwf	4,w	;XOR with final address
   104  016A  1903               	btfsc	3,2	;have we reached the end yet?
   105  016B  3400               	retlw	0	;all done for this memory range, return
   106  016C  0604               	xorwf	4,w	;XOR again to restore value
   107  016D  2967               	goto	clrloop	;do the next byte
   108                           
   109                           	psect	cstackCOMMON
   110  0000                     __pcstackCOMMON:	
   111  0000                     ??_timerInterruptIsr:	
   112                           
   113                           	psect	cstackBANK0
   114  002D                     __pcstackBANK0:	
   115                           ; 0 bytes @ 0x0
   116                           
   117  002D                     ?_timerInterruptIsr:	
   118  002D                     ?_interruptOnChangeIsr:	
   119                           ; 0 bytes @ 0x0
   120                           
   121  002D                     ??_interruptOnChangeIsr:	
   122                           ; 0 bytes @ 0x0
   123                           
   124  002D                     ?_t0intr:	
   125                           ; 0 bytes @ 0x0
   126                           
   127  002D                     ?_main:	
   128                           ; 0 bytes @ 0x0
   129                           
   130                           
   131                           ; 0 bytes @ 0x0
   132  002D                     	ds	3
   133  0030                     interruptOnChangeIsr@tdiff:	
   134                           
   135                           ; 3 bytes @ 0x3
   136  0030                     	ds	3
   137  0033                     interruptOnChangeIsr@pin:	
   138                           
   139                           ; 1 bytes @ 0x6
   140  0033                     	ds	1
   141  0034                     ??_t0intr:	
   142                           
   143                           ; 0 bytes @ 0x7
   144  0034                     	ds	2
   145  0036                     ??_main:	
   146                           
   147                           ; 0 bytes @ 0x9
   148  0036                     	ds	1
   149                           
   150                           	psect	maintext
   151  00CA                     __pmaintext:	
   152 ;;Data sizes: Strings 0, constant 0, data 4, bss 13, persistent 0 stack 0
   153 ;;Auto spaces:   Size  Autos    Used
   154 ;; COMMON           0      0       0
   155 ;; BANK0           62     10      27
   156 ;;
   157 ;; Pointer list with targets:
   158 ;;
   159 ;; Critical Paths under _main in COMMON
   160 ;;
   161 ;;   None.
   162 ;;
   163 ;; Critical Paths under _t0intr in COMMON
   164 ;;
   165 ;;   None.
   166 ;;
   167 ;; Critical Paths under _main in BANK0
   168 ;;
   169 ;;   None.
   170 ;;
   171 ;; Critical Paths under _t0intr in BANK0
   172 ;;
   173 ;;   _t0intr->_interruptOnChangeIsr
   174 ;;
   175 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   176 ;;
   177 ;;
   178 ;;Call Graph Tables:
   179 ;;
   180 ;; ---------------------------------------------------------------------------------
   181 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   182 ;; ---------------------------------------------------------------------------------
   183 ;; (0) _main                                                 1     1      0       0
   184 ;;                                              9 BANK0      1     1      0
   185 ;; ---------------------------------------------------------------------------------
   186 ;; Estimated maximum stack depth 0
   187 ;; ---------------------------------------------------------------------------------
   188 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   189 ;; ---------------------------------------------------------------------------------
   190 ;; (1) _t0intr                                               2     2      0     135
   191 ;;                                              7 BANK0      2     2      0
   192 ;;                  _timerInterruptIsr
   193 ;;               _interruptOnChangeIsr
   194 ;; ---------------------------------------------------------------------------------
   195 ;; (2) _interruptOnChangeIsr                                 7     7      0     135
   196 ;;                                              0 BANK0      7     7      0
   197 ;; ---------------------------------------------------------------------------------
   198 ;; (2) _timerInterruptIsr                                    0     0      0       0
   199 ;; ---------------------------------------------------------------------------------
   200 ;; Estimated maximum stack depth 2
   201 ;; ---------------------------------------------------------------------------------
   202 ;; Call Graph Graphs:
   203 ;; _main (ROOT)
   204 ;;
   205 ;; _t0intr (ROOT)
   206 ;;   _timerInterruptIsr
   207 ;;   _interruptOnChangeIsr
   208 ;;
   209 ;; Address spaces:
   210 ;;Name               Size   Autos  Total    Cost      Usage
   211 ;;SFR1                 0      0       0       2        0.0%
   212 ;;BITSFR1              0      0       0       2        0.0%
   213 ;;CODE                 0      0       0       0        0.0%
   214 ;;DATA                 0      0      1F       6        0.0%
   215 ;;ABS                  0      0      1B       5        0.0%
   216 ;;NULL                 0      0       0       0        0.0%
   217 ;;STACK                0      0       4       2        0.0%
   218 ;;BANK0               3E      A      1B       4       43.5%
   219 ;;BITBANK0            3E      0       0       3        0.0%
   220 ;;SFR0                 0      0       0       1        0.0%
   221 ;;BITSFR0              0      0       0       1        0.0%
   222 ;;COMMON               0      0       0       1        0.0%
   223 ;;BITCOMMON            0      0       0       0        0.0%
   224 ;;EEDATA              80      0       0       0        0.0%
   225                           
   226                           
   227 ;; *************** function _main *****************
   228 ;; Defined at:
   229 ;;		line 90 in file "C:\Users\Gaurav\Documents\GitHub\IR-Remote-Control\NEC IR Receiver Relay Board\main.c"
   230 ;; Parameters:    Size  Location     Type
   231 ;;		None
   232 ;; Auto vars:     Size  Location     Type
   233 ;;		None
   234 ;; Return value:  Size  Location     Type
   235 ;;		None               void
   236 ;; Registers used:
   237 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   238 ;; Tracked objects:
   239 ;;		On entry : 17F/0
   240 ;;		On exit  : 17F/0
   241 ;;		Unchanged: FFE80/0
   242 ;; Data sizes:     COMMON   BANK0
   243 ;;      Params:         0       0
   244 ;;      Locals:         0       0
   245 ;;      Temps:          0       1
   246 ;;      Totals:         0       1
   247 ;;Total ram usage:        1 bytes
   248 ;; Hardware stack levels required when called:    2
   249 ;; This function calls:
   250 ;;		Nothing
   251 ;; This function is called by:
   252 ;;		Startup code after reset
   253 ;; This function uses a non-reentrant model
   254 ;;
   255  00CA                     _main:	
   256                           
   257                           ;main.c: 92: CMCON=0x7;
   258                           
   259                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0]
   260  00CA  3007               	movlw	7
   261  00CB  0099               	movwf	25	;volatile
   262                           
   263                           ;main.c: 93: ANSEL=0x00;
   264  00CC  1683               	bsf	3,5	;RP0=1, select bank1
   265  00CD  019F               	clrf	31	;volatile
   266                           
   267                           ;main.c: 94: TRISIO=0x8;
   268  00CE  3008               	movlw	8
   269  00CF  0085               	movwf	5	;volatile
   270                           
   271                           ;main.c: 95: TMR0 = 0;
   272  00D0  1283               	bcf	3,5	;RP0=0, select bank0
   273  00D1  0181               	clrf	1	;volatile
   274                           
   275                           ;main.c: 96: OPTION_REG = 0x88;
   276  00D2  3088               	movlw	136
   277  00D3  1683               	bsf	3,5	;RP0=1, select bank1
   278  00D4  0081               	movwf	1	;volatile
   279                           
   280                           ;main.c: 99: IOC = 0x8;
   281  00D5  3008               	movlw	8
   282  00D6  0096               	movwf	22	;volatile
   283                           
   284                           ;main.c: 100: INTCONbits.T0IE = 1;
   285  00D7  168B               	bsf	11,5	;volatile
   286                           
   287                           ;main.c: 101: INTCONbits.T0IF = 0;
   288  00D8  110B               	bcf	11,2	;volatile
   289                           
   290                           ;main.c: 102: INTCONbits.GPIE = 1;
   291  00D9  158B               	bsf	11,3	;volatile
   292                           
   293                           ;main.c: 103: INTCONbits.GPIF = 0;
   294  00DA  100B               	bcf	11,0	;volatile
   295                           
   296                           ;main.c: 104: INTCONbits.PEIE = 1;
   297  00DB  170B               	bsf	11,6	;volatile
   298                           
   299                           ;main.c: 105: INTCONbits.GIE = 1;
   300  00DC  178B               	bsf	11,7	;volatile
   301                           
   302                           ;main.c: 109: EEADR = 0x00;
   303  00DD  019B               	clrf	27	;volatile
   304                           
   305                           ;main.c: 110: EECON1bits.RD = 1;
   306  00DE  141C               	bsf	28,0	;volatile
   307                           
   308                           ;main.c: 111: GPIO = EEDATA;
   309  00DF  081A               	movf	26,w	;volatile
   310  00E0  1283               	bcf	3,5	;RP0=0, select bank0
   311  00E1  0085               	movwf	5	;volatile
   312  00E2                     l1455:	
   313                           
   314                           ;main.c: 114: {
   315                           ;main.c: 116: if(dataready)
   316  00E2  0829               	movf	_dataready,w
   317  00E3  1903               	btfsc	3,2
   318  00E4  28E2               	goto	l1455
   319  00E5  2911               	goto	l1469
   320  00E6                     l1459:	
   321  00E6  3000               	movlw	0
   322  00E7  1C05               	btfss	5,0	;volatile
   323  00E8  3001               	movlw	1
   324  00E9  00B6               	movwf	??_main
   325  00EA  0805               	movf	5,w	;volatile
   326  00EB  0636               	xorwf	??_main,w
   327  00EC  39FE               	andlw	-2
   328  00ED  2909               	goto	L3
   329  00EE                     l1461:	
   330                           ;main.c: 129: break;
   331                           
   332  00EE  3000               	movlw	0
   333  00EF  1C85               	btfss	5,1	;volatile
   334  00F0  3001               	movlw	1
   335  00F1  00B6               	movwf	??_main
   336  00F2  0DB6               	rlf	??_main,f
   337  00F3  0805               	movf	5,w	;volatile
   338  00F4  0636               	xorwf	??_main,w
   339  00F5  39FD               	andlw	-3
   340  00F6  2909               	goto	L3
   341  00F7                     l1463:	
   342                           ;main.c: 131: break;
   343                           
   344  00F7  3000               	movlw	0
   345  00F8  1D05               	btfss	5,2	;volatile
   346  00F9  3001               	movlw	1
   347  00FA  00B6               	movwf	??_main
   348  00FB  0DB6               	rlf	??_main,f
   349  00FC  0DB6               	rlf	??_main,f
   350  00FD  0805               	movf	5,w	;volatile
   351  00FE  0636               	xorwf	??_main,w
   352  00FF  39FB               	andlw	-5
   353  0100  2909               	goto	L3
   354  0101                     l1465:	
   355                           ;main.c: 133: break;
   356                           
   357  0101  3000               	movlw	0
   358  0102  1E05               	btfss	5,4	;volatile
   359  0103  3001               	movlw	1
   360  0104  00B6               	movwf	??_main
   361  0105  0EB6               	swapf	??_main,f
   362  0106  0805               	movf	5,w	;volatile
   363  0107  0636               	xorwf	??_main,w
   364  0108  39EF               	andlw	-17
   365  0109                     L3:	
   366  0109  0636               	xorwf	??_main,w
   367  010A  0085               	movwf	5	;volatile
   368                           
   369                           ;main.c: 135: break;
   370  010B  2922               	goto	l1471
   371  010C                     l379:	
   372                           ;main.c: 136: case 0xB0: GPIObits.GPIO0 = 0;
   373                           
   374  010C  1005               	bcf	5,0	;volatile
   375                           
   376                           ;main.c: 137: GPIObits.GPIO1 = 0;
   377  010D  1085               	bcf	5,1	;volatile
   378                           
   379                           ;main.c: 138: GPIObits.GPIO2 = 0;
   380  010E  1105               	bcf	5,2	;volatile
   381                           
   382                           ;main.c: 139: GPIObits.GPIO4 = 0;
   383  010F  1205               	bcf	5,4	;volatile
   384                           
   385                           ;main.c: 140: break;
   386  0110  2922               	goto	l1471
   387  0111                     l1469:	
   388  0111  0828               	movf	_command,w
   389                           
   390                           ; Switch size 1, requested type "space"
   391                           ; Number of cases is 5, Range of values is 48 to 248
   392                           ; switch strategies available:
   393                           ; Name         Instructions Cycles
   394                           ; simple_byte           16     9 (average)
   395                           ; direct_byte          210     9 (fixed)
   396                           ; jumptable            263     9 (fixed)
   397                           ;	Chosen strategy is simple_byte
   398  0112  3A30               	xorlw	48	; case 48
   399  0113  1903               	skipnz
   400  0114  2901               	goto	l1465
   401  0115  3A60               	xorlw	96	; case 80
   402  0116  1903               	skipnz
   403  0117  28E6               	goto	l1459
   404  0118  3AE0               	xorlw	224	; case 176
   405  0119  1903               	skipnz
   406  011A  290C               	goto	l379
   407  011B  3A68               	xorlw	104	; case 216
   408  011C  1903               	skipnz
   409  011D  28EE               	goto	l1461
   410  011E  3A20               	xorlw	32	; case 248
   411  011F  1903               	skipnz
   412  0120  28F7               	goto	l1463
   413  0121  2922               	goto	l1471
   414  0122                     l1471:	
   415                           
   416                           ;main.c: 145: EEADR = 0x00;
   417  0122  1683               	bsf	3,5	;RP0=1, select bank1
   418  0123  019B               	clrf	27	;volatile
   419                           
   420                           ;main.c: 146: EEDATA = GPIO;
   421  0124  1283               	bcf	3,5	;RP0=0, select bank0
   422  0125  0805               	movf	5,w	;volatile
   423  0126  1683               	bsf	3,5	;RP0=1, select bank1
   424  0127  009A               	movwf	26	;volatile
   425                           
   426                           ;main.c: 147: EECON1bits.WREN = 1;
   427  0128  151C               	bsf	28,2	;volatile
   428                           
   429                           ;main.c: 148: INTCONbits.GIE = 0;
   430  0129  138B               	bcf	11,7	;volatile
   431                           
   432                           ;main.c: 149: EECON2 = 0x55;
   433  012A  3055               	movlw	85
   434  012B  009D               	movwf	29	;volatile
   435                           
   436                           ;main.c: 150: EECON2 = 0xAA;
   437  012C  30AA               	movlw	170
   438  012D  009D               	movwf	29	;volatile
   439                           
   440                           ;main.c: 151: EECON1bits.WR = 1;
   441  012E  149C               	bsf	28,1	;volatile
   442                           
   443                           ;main.c: 152: INTCONbits.GIE = 1;
   444  012F  178B               	bsf	11,7	;volatile
   445                           
   446                           ;main.c: 154: dataready=0;
   447  0130  1283               	bcf	3,5	;RP0=0, select bank0
   448  0131  01A9               	clrf	_dataready
   449  0132  28E2               	goto	l1455
   450  0133                     __end_of_main:	
   451                           
   452                           	psect	text77
   453  0133                     __ptext77:	
   454 ;; =============== function _main ends ============
   455                           
   456                           
   457 ;; *************** function _t0intr *****************
   458 ;; Defined at:
   459 ;;		line 70 in file "C:\Users\Gaurav\Documents\GitHub\IR-Remote-Control\NEC IR Receiver Relay Board\main.c"
   460 ;; Parameters:    Size  Location     Type
   461 ;;		None
   462 ;; Auto vars:     Size  Location     Type
   463 ;;		None
   464 ;; Return value:  Size  Location     Type
   465 ;;		None               void
   466 ;; Registers used:
   467 ;;		wreg, status,2, status,0, pclath, cstack
   468 ;; Tracked objects:
   469 ;;		On entry : 0/0
   470 ;;		On exit  : 20/0
   471 ;;		Unchanged: FFFDF/0
   472 ;; Data sizes:     COMMON   BANK0
   473 ;;      Params:         0       0
   474 ;;      Locals:         0       0
   475 ;;      Temps:          0       2
   476 ;;      Totals:         0       2
   477 ;;Total ram usage:        2 bytes
   478 ;; Hardware stack levels used:    1
   479 ;; Hardware stack levels required when called:    1
   480 ;; This function calls:
   481 ;;		_timerInterruptIsr
   482 ;;		_interruptOnChangeIsr
   483 ;; This function is called by:
   484 ;;		Interrupt level 1
   485 ;; This function uses a non-reentrant model
   486 ;;
   487  0133                     _t0intr:	
   488                           
   489                           ;main.c: 71: if(INTCONbits.T0IF)
   490  0133  1D0B               	btfss	11,2	;volatile
   491  0134  2938               	goto	i1l365
   492                           
   493                           ;main.c: 72: {
   494                           ;main.c: 73: timerInterruptIsr();
   495  0135  2145               	fcall	_timerInterruptIsr
   496                           
   497                           ;main.c: 74: INTCONbits.T0IF =0;
   498  0136  110B               	bcf	11,2	;volatile
   499                           
   500                           ;main.c: 75: }
   501  0137  293E               	goto	i1l368
   502  0138                     i1l365:	
   503                           
   504                           ;main.c: 76: else if (INTCONbits.GPIF)
   505  0138  1C0B               	btfss	11,0	;volatile
   506  0139  293E               	goto	i1l368
   507                           
   508                           ;main.c: 77: {
   509                           ;main.c: 78: GPIObits.GPIO5=1;
   510  013A  1685               	bsf	5,5	;volatile
   511                           
   512                           ;main.c: 79: interruptOnChangeIsr();
   513  013B  2010               	fcall	_interruptOnChangeIsr
   514                           
   515                           ;main.c: 80: INTCONbits.GPIF =0;
   516  013C  100B               	bcf	11,0	;volatile
   517                           
   518                           ;main.c: 81: GPIObits.GPIO5=0;
   519  013D  1285               	bcf	5,5	;volatile
   520  013E                     i1l368:	
   521  013E  0835               	movf	??_t0intr+1,w
   522  013F  008A               	movwf	10
   523  0140  0E34               	swapf	??_t0intr^0,w
   524  0141  0083               	movwf	3
   525  0142  0EDE               	swapf	94,f
   526  0143  0E5E               	swapf	94,w
   527  0144  0009               	retfie
   528  0145                     __end_of_t0intr:	
   529                           
   530                           	psect	intentry
   531  0004                     __pintentry:	
   532                           ; Regs used in _t0intr: [wreg+status,2+status,0+pclath+cstack]
   533                           
   534  0004                     interrupt_function:	
   535  005E                     saved_w	set	btemp
   536  0004  00DE               	movwf	btemp
   537  0005  0E03               	swapf	3,w
   538  0006  1283               	bcf	3,5	;RP0=0, select bank0
   539  0007  00B4               	movwf	??_t0intr
   540  0008  080A               	movf	10,w
   541  0009  00B5               	movwf	??_t0intr+1
   542  000A  2933               	ljmp	_t0intr
   543                           
   544                           	psect	text78
   545  0010                     __ptext78:	
   546 ;; =============== function _t0intr ends ============
   547                           
   548                           
   549 ;; *************** function _interruptOnChangeIsr *****************
   550 ;; Defined at:
   551 ;;		line 163 in file "C:\Users\Gaurav\Documents\GitHub\IR-Remote-Control\NEC IR Receiver Relay Board\main.c"
   552 ;; Parameters:    Size  Location     Type
   553 ;;		None
   554 ;; Auto vars:     Size  Location     Type
   555 ;;  tdiff           3    3[BANK0 ] unsigned um
   556 ;;  pin             1    6[BANK0 ] unsigned char 
   557 ;; Return value:  Size  Location     Type
   558 ;;		None               void
   559 ;; Registers used:
   560 ;;		wreg, status,2, status,0
   561 ;; Tracked objects:
   562 ;;		On entry : 20/0
   563 ;;		On exit  : 20/0
   564 ;;		Unchanged: FFFDF/0
   565 ;; Data sizes:     COMMON   BANK0
   566 ;;      Params:         0       0
   567 ;;      Locals:         0       4
   568 ;;      Temps:          0       3
   569 ;;      Totals:         0       7
   570 ;;Total ram usage:        7 bytes
   571 ;; Hardware stack levels used:    1
   572 ;; This function calls:
   573 ;;		Nothing
   574 ;; This function is called by:
   575 ;;		_t0intr
   576 ;; This function uses a non-reentrant model
   577 ;;
   578  0010                     _interruptOnChangeIsr:	
   579                           
   580                           ;main.c: 165: unsigned short long tdiff;
   581                           ;main.c: 166: unsigned char pin;
   582                           ;main.c: 167: static unsigned long rxbuffer;
   583                           ;main.c: 170: tdiff = ((timer<<8)+TMR0) ;
   584                           
   585                           ; Regs used in _interruptOnChangeIsr: [wreg+status,2+status,0]
   586  0010  0824               	movf	_timer,w
   587  0011  00AD               	movwf	??_interruptOnChangeIsr
   588  0012  0825               	movf	_timer+1,w
   589  0013  00AE               	movwf	??_interruptOnChangeIsr+1
   590  0014  0826               	movf	_timer+2,w
   591  0015  00AF               	movwf	??_interruptOnChangeIsr+2
   592  0016  082E               	movf	??_interruptOnChangeIsr+1,w
   593  0017  00AF               	movwf	??_interruptOnChangeIsr+2
   594  0018  082D               	movf	??_interruptOnChangeIsr,w
   595  0019  00AE               	movwf	??_interruptOnChangeIsr+1
   596  001A  01AD               	clrf	??_interruptOnChangeIsr
   597  001B  082D               	movf	??_interruptOnChangeIsr,w
   598  001C  00B0               	movwf	interruptOnChangeIsr@tdiff
   599  001D  082E               	movf	??_interruptOnChangeIsr+1,w
   600  001E  00B1               	movwf	interruptOnChangeIsr@tdiff+1
   601  001F  082F               	movf	??_interruptOnChangeIsr+2,w
   602  0020  00B2               	movwf	interruptOnChangeIsr@tdiff+2
   603  0021  0801               	movf	1,w	;volatile
   604  0022  07B0               	addwf	interruptOnChangeIsr@tdiff,f
   605  0023  3001               	movlw	1
   606  0024  1803               	skipnc
   607  0025  07B1               	addwf	interruptOnChangeIsr@tdiff+1,f
   608  0026  1803               	skipnc
   609  0027  07B2               	addwf	interruptOnChangeIsr@tdiff+2,f
   610                           
   611                           ;main.c: 172: pin = GPIObits.GPIO3;
   612  0028  3000               	movlw	0
   613  0029  1985               	btfsc	5,3	;volatile
   614  002A  3001               	movlw	1
   615  002B  00B3               	movwf	interruptOnChangeIsr@pin
   616                           
   617                           ;main.c: 173: TMR0 = 0;
   618  002C  0181               	clrf	1	;volatile
   619                           
   620                           ;main.c: 174: timer = 0;
   621  002D  01A4               	clrf	_timer
   622  002E  01A5               	clrf	_timer+1
   623  002F  01A6               	clrf	_timer+2
   624                           
   625                           ;main.c: 204: if ((tdiff>PREPULSE) && (tdiff<TIMEOUT) )
   626  0030  0837               	movf	_PREPULSE,w
   627  0031  00AD               	movwf	??_interruptOnChangeIsr
   628  0032  0838               	movf	_PREPULSE+1,w
   629  0033  00AE               	movwf	??_interruptOnChangeIsr+1
   630  0034  01AF               	clrf	??_interruptOnChangeIsr+2
   631  0035  0832               	movf	interruptOnChangeIsr@tdiff+2,w
   632  0036  022F               	subwf	??_interruptOnChangeIsr+2,w
   633  0037  1D03               	skipz
   634  0038  283F               	goto	u23_25
   635  0039  0831               	movf	interruptOnChangeIsr@tdiff+1,w
   636  003A  022E               	subwf	??_interruptOnChangeIsr+1,w
   637  003B  1D03               	skipz
   638  003C  283F               	goto	u23_25
   639  003D  0830               	movf	interruptOnChangeIsr@tdiff,w
   640  003E  022D               	subwf	??_interruptOnChangeIsr,w
   641  003F                     u23_25:	
   642  003F  1803               	skipnc
   643  0040  28B3               	goto	i1l1411
   644  0041  0839               	movf	_TIMEOUT,w
   645  0042  00AD               	movwf	??_interruptOnChangeIsr
   646  0043  083A               	movf	_TIMEOUT+1,w
   647  0044  00AE               	movwf	??_interruptOnChangeIsr+1
   648  0045  01AF               	clrf	??_interruptOnChangeIsr+2
   649  0046  082F               	movf	??_interruptOnChangeIsr+2,w
   650  0047  0232               	subwf	interruptOnChangeIsr@tdiff+2,w
   651  0048  1D03               	skipz
   652  0049  2850               	goto	u24_25
   653  004A  082E               	movf	??_interruptOnChangeIsr+1,w
   654  004B  0231               	subwf	interruptOnChangeIsr@tdiff+1,w
   655  004C  1D03               	skipz
   656  004D  2850               	goto	u24_25
   657  004E  082D               	movf	??_interruptOnChangeIsr,w
   658  004F  0230               	subwf	interruptOnChangeIsr@tdiff,w
   659  0050                     u24_25:	
   660  0050  1803               	skipnc
   661  0051  28B3               	goto	i1l1411
   662                           
   663                           ;main.c: 205: {
   664                           ;main.c: 210: if(necpoj==1 || necpoj==2)
   665  0052  032A               	decf	_necpoj,w
   666  0053  1903               	skipnz
   667  0054  2859               	goto	i1l1353
   668  0055  082A               	movf	_necpoj,w
   669  0056  3A02               	xorlw	2
   670  0057  1D03               	skipz
   671  0058  287A               	goto	i1l1379
   672  0059                     i1l1353:	
   673                           
   674                           ;main.c: 211: {
   675                           ;main.c: 213: if((pin==1) && (necpoj==1))
   676  0059  0B33               	decfsz	interruptOnChangeIsr@pin,w
   677  005A  2867               	goto	i1l1363
   678  005B  0B2A               	decfsz	_necpoj,w
   679  005C  2867               	goto	i1l1363
   680  005D  3092               	movlw	146
   681                           
   682                           ;main.c: 214: {
   683                           ;main.c: 215: necpoj++;
   684  005E  0AAA               	incf	_necpoj,f
   685                           
   686                           ;main.c: 216: TIMEOUT = 5522;
   687  005F  00B9               	movwf	_TIMEOUT
   688  0060  3015               	movlw	21
   689  0061  00BA               	movwf	_TIMEOUT+1
   690                           
   691                           ;main.c: 217: PREPULSE = 3012;
   692  0062  30C4               	movlw	196
   693  0063  00B7               	movwf	_PREPULSE
   694  0064  300B               	movlw	11
   695  0065  00B8               	movwf	_PREPULSE+1
   696                           
   697                           ;main.c: 218: }
   698  0066  0008               	return
   699  0067                     i1l1363:	
   700                           
   701                           ;main.c: 219: else if((pin==0)&& (necpoj ==2))
   702  0067  08B3               	movf	interruptOnChangeIsr@pin,f
   703  0068  1D03               	skipz
   704  0069  2877               	goto	i1l1373
   705  006A  082A               	movf	_necpoj,w
   706  006B  3A02               	xorlw	2
   707  006C  1D03               	skipz
   708  006D  2877               	goto	i1l1373
   709  006E  3005               	movlw	5
   710                           
   711                           ;main.c: 220: {
   712                           ;main.c: 221: necpoj++;
   713  006F  0AAA               	incf	_necpoj,f
   714                           
   715                           ;main.c: 223: TIMEOUT = 2309;
   716  0070  00B9               	movwf	_TIMEOUT
   717  0071  3009               	movlw	9
   718  0072  00BA               	movwf	_TIMEOUT+1
   719                           
   720                           ;main.c: 224: PREPULSE = 200;
   721  0073  30C8               	movlw	200
   722  0074  00B7               	movwf	_PREPULSE
   723  0075  01B8               	clrf	_PREPULSE+1
   724                           
   725                           ;main.c: 226: }
   726  0076  0008               	return
   727  0077                     i1l1373:	
   728                           
   729                           ;main.c: 227: else
   730                           ;main.c: 228: {
   731                           ;main.c: 229: necpoj = 0;
   732  0077  01AA               	clrf	_necpoj
   733  0078                     i1l1375:	
   734                           
   735                           ;main.c: 230: TIMEOUT = 11044;
   736                           
   737                           ;main.c: 231: PREPULSE = 8032;
   738  0078  20C1               	fcall	PL2	;call to abstracted procedure
   739  0079  0008               	return
   740  007A                     i1l1379:	
   741                           
   742                           ;main.c: 234: else if(necpoj>2)
   743  007A  3003               	movlw	3
   744  007B  022A               	subwf	_necpoj,w
   745  007C  1C03               	skipc
   746  007D  28B1               	goto	i1l1409
   747                           
   748                           ;main.c: 235: {
   749                           ;main.c: 237: necpoj++;
   750  007E  0AAA               	incf	_necpoj,f
   751                           
   752                           ;main.c: 239: if(necpoj&0x01)
   753  007F  1C2A               	btfss	_necpoj,0
   754  0080  2892               	goto	i1l1391
   755  0081  3000               	movlw	0
   756                           
   757                           ;main.c: 241: {
   758                           ;main.c: 242: rxbuffer=rxbuffer<<1;
   759  0082  1003               	clrc
   760  0083  0DA0               	rlf	interruptOnChangeIsr@rxbuffer,f
   761  0084  0DA1               	rlf	interruptOnChangeIsr@rxbuffer+1,f
   762  0085  0DA2               	rlf	interruptOnChangeIsr@rxbuffer+2,f
   763  0086  0DA3               	rlf	interruptOnChangeIsr@rxbuffer+3,f
   764                           
   765                           ;main.c: 243: if(tdiff>1250)
   766  0087  0232               	subwf	interruptOnChangeIsr@tdiff+2,w
   767  0088  1D03               	skipz
   768  0089  2890               	goto	u33_25
   769  008A  3004               	movlw	4
   770  008B  0231               	subwf	interruptOnChangeIsr@tdiff+1,w
   771  008C  1D03               	skipz
   772  008D  2890               	goto	u33_25
   773  008E  30E3               	movlw	227
   774  008F  0230               	subwf	interruptOnChangeIsr@tdiff,w
   775  0090                     u33_25:	
   776  0090  1803               	btfsc	3,0
   777                           
   778                           ;main.c: 245: {
   779                           ;main.c: 246: rxbuffer = rxbuffer | 0x1;
   780  0091  1420               	bsf	interruptOnChangeIsr@rxbuffer,0
   781  0092                     i1l1391:	
   782                           ;main.c: 248: }
   783                           
   784                           
   785                           ;main.c: 253: }
   786                           ;main.c: 255: }
   787                           ;main.c: 257: if(necpoj >66)
   788  0092  3043               	movlw	67
   789  0093  022A               	subwf	_necpoj,w
   790  0094  1C03               	skipc
   791  0095  0008               	return
   792                           
   793                           ;main.c: 258: {
   794                           ;main.c: 260: address = (rxbuffer>>24)& 0xFF;
   795  0096  0823               	movf	interruptOnChangeIsr@rxbuffer+3,w
   796  0097  00A7               	movwf	_address
   797                           
   798                           ;main.c: 261: notaddress = (rxbuffer>>16)& 0xFF;
   799  0098  0822               	movf	interruptOnChangeIsr@rxbuffer+2,w
   800  0099  00AB               	movwf	_notaddress
   801                           
   802                           ;main.c: 262: command = (rxbuffer>>8) & 0xFF;
   803  009A  0821               	movf	interruptOnChangeIsr@rxbuffer+1,w
   804  009B  00A8               	movwf	_command
   805                           
   806                           ;main.c: 263: notcommand = (rxbuffer) & 0xFF;
   807  009C  0820               	movf	interruptOnChangeIsr@rxbuffer,w
   808  009D  00AC               	movwf	_notcommand
   809                           
   810                           ;main.c: 264: rxbuffer=0;
   811  009E  01A0               	clrf	interruptOnChangeIsr@rxbuffer
   812  009F  01A1               	clrf	interruptOnChangeIsr@rxbuffer+1
   813  00A0  01A2               	clrf	interruptOnChangeIsr@rxbuffer+2
   814  00A1  01A3               	clrf	interruptOnChangeIsr@rxbuffer+3
   815                           
   816                           ;main.c: 266: if((!(address & notaddress)) && (!(command & notcommand)))
   817  00A2  0827               	movf	_address,w
   818  00A3  052B               	andwf	_notaddress,w
   819  00A4  1D03               	btfss	3,2
   820  00A5  28AD               	goto	i1l1403
   821  00A6  0828               	movf	_command,w
   822  00A7  052C               	andwf	_notcommand,w
   823  00A8  1D03               	btfss	3,2
   824  00A9  28AD               	goto	i1l1403
   825                           
   826                           ;main.c: 267: {
   827                           ;main.c: 268: dataready =1;
   828  00AA  01A9               	clrf	_dataready
   829  00AB  0AA9               	incf	_dataready,f
   830                           
   831                           ;main.c: 269: }
   832  00AC  28AE               	goto	i1l1405
   833  00AD                     i1l1403:	
   834                           
   835                           ;main.c: 270: else
   836                           ;main.c: 271: {
   837                           ;main.c: 272: dataready=0;
   838  00AD  01A9               	clrf	_dataready
   839  00AE                     i1l1405:	
   840                           
   841                           ;main.c: 273: }
   842                           ;main.c: 274: TIMEOUT = 11044;
   843                           
   844                           ;main.c: 275: PREPULSE = 8032;
   845  00AE  20C1               	fcall	PL2	;call to abstracted procedure
   846                           
   847                           ;main.c: 276: necpoj=0;
   848  00AF  01AA               	clrf	_necpoj
   849  00B0  0008               	return
   850  00B1                     i1l1409:	
   851                           
   852                           ;main.c: 280: else
   853                           ;main.c: 281: {
   854                           ;main.c: 283: TIMEOUT = 11044;
   855                           
   856                           ;main.c: 284: PREPULSE = 8032;
   857  00B1  20C1               	fcall	PL2	;call to abstracted procedure
   858  00B2  0008               	return
   859  00B3                     i1l1411:	
   860                           ;main.c: 285: }
   861                           ;main.c: 290: }
   862                           
   863                           
   864                           ;main.c: 291: else
   865                           ;main.c: 292: {
   866                           ;main.c: 294: if(pin==0)
   867  00B3  08B3               	movf	interruptOnChangeIsr@pin,f
   868  00B4  1D03               	skipz
   869  00B5  28B9               	goto	i1l1415
   870                           
   871                           ;main.c: 295: {
   872                           ;main.c: 296: necpoj = 1;
   873  00B6  01AA               	clrf	_necpoj
   874  00B7  0AAA               	incf	_necpoj,f
   875                           
   876                           ;main.c: 297: }
   877  00B8  28BA               	goto	i1l1417
   878  00B9                     i1l1415:	
   879                           
   880                           ;main.c: 298: else
   881                           ;main.c: 299: {
   882                           ;main.c: 300: necpoj = 0;
   883  00B9  01AA               	clrf	_necpoj
   884  00BA                     i1l1417:	
   885                           
   886                           ;main.c: 301: }
   887                           ;main.c: 303: address = 0xFF;
   888  00BA  30FF               	movlw	255
   889  00BB  00A7               	movwf	_address
   890                           
   891                           ;main.c: 304: notaddress = 0xFF;
   892  00BC  00AB               	movwf	_notaddress
   893                           
   894                           ;main.c: 305: command = 0xFF;
   895  00BD  00A8               	movwf	_command
   896                           
   897                           ;main.c: 306: notcommand = 0xFF;
   898  00BE  00AC               	movwf	_notcommand
   899                           
   900                           ;main.c: 307: dataready = 0x000;
   901  00BF  01A9               	clrf	_dataready
   902  00C0  2878               	goto	i1l1375
   903  00C1                     __end_of_interruptOnChangeIsr:	
   904  00C1                     PL2:	
   905  00C1  3024               	movlw	36
   906  00C2  00B9               	movwf	_TIMEOUT
   907  00C3  302B               	movlw	43
   908  00C4  00BA               	movwf	_TIMEOUT+1
   909  00C5  3060               	movlw	96
   910  00C6  00B7               	movwf	_PREPULSE
   911  00C7  301F               	movlw	31
   912  00C8  00B8               	movwf	_PREPULSE+1
   913  00C9  0008               	return
   914                           
   915                           	psect	text79
   916  0145                     __ptext79:	
   917 ;; =============== function _interruptOnChangeIsr ends ============
   918                           
   919                           
   920 ;; *************** function _timerInterruptIsr *****************
   921 ;; Defined at:
   922 ;;		line 315 in file "C:\Users\Gaurav\Documents\GitHub\IR-Remote-Control\NEC IR Receiver Relay Board\main.c"
   923 ;; Parameters:    Size  Location     Type
   924 ;;		None
   925 ;; Auto vars:     Size  Location     Type
   926 ;;		None
   927 ;; Return value:  Size  Location     Type
   928 ;;		None               void
   929 ;; Registers used:
   930 ;;		wreg, status,2, status,0
   931 ;; Tracked objects:
   932 ;;		On entry : 20/0
   933 ;;		On exit  : 20/0
   934 ;;		Unchanged: FFFDF/0
   935 ;; Data sizes:     COMMON   BANK0
   936 ;;      Params:         0       0
   937 ;;      Locals:         0       0
   938 ;;      Temps:          0       0
   939 ;;      Totals:         0       0
   940 ;;Total ram usage:        0 bytes
   941 ;; Hardware stack levels used:    1
   942 ;; This function calls:
   943 ;;		Nothing
   944 ;; This function is called by:
   945 ;;		_t0intr
   946 ;; This function uses a non-reentrant model
   947 ;;
   948  0145                     _timerInterruptIsr:	
   949                           
   950                           ;main.c: 316: if(timer<0xFFFF)
   951                           
   952                           ; Regs used in _timerInterruptIsr: [wreg+status,2+status,0]
   953  0145  3000               	movlw	0
   954  0146  0226               	subwf	_timer+2,w
   955  0147  1D03               	skipz
   956  0148  294F               	goto	u22_25
   957  0149  30FF               	movlw	255
   958  014A  0225               	subwf	_timer+1,w
   959  014B  1D03               	skipz
   960  014C  294F               	goto	u22_25
   961  014D  30FF               	movlw	255
   962  014E  0224               	subwf	_timer,w
   963  014F                     u22_25:	
   964  014F  1803               	skipnc
   965  0150  0008               	return
   966                           
   967                           ;main.c: 317: timer++;
   968  0151  0AA4               	incf	_timer,f
   969  0152  1903               	skipnz
   970  0153  0AA5               	incf	_timer+1,f
   971  0154  1903               	skipnz
   972  0155  0AA6               	incf	_timer+2,f
   973  0156  0008               	return
   974  0157                     __end_of_timerInterruptIsr:	
   975                           
   976                           	psect	text80
   977  0000                     __ptext80:	
   978 ;; =============== function _timerInterruptIsr ends ============
   979                           
   980  005E                     btemp	set	94	;btemp
   981  005E                     wtemp0	set	94


HI-TECH Software PICC Macro Assembler V9.83 build 10920 
Symbol Table                                                                                   Thu Dec 12 20:12:29 2013

                           fsr 0004                            l379 010C                            _IOC 0096  
                          indf 0000                           l1431 0000                           l1441 0000  
                         l1433 0000                           l1451 0000                           l1443 0000  
                         l1435 0000                           l1461 00EE                           l1453 0000  
                         l1445 0000                           l1437 0000                           l1429 0000  
                         l1463 00F7                           l1471 0122                           l1455 00E2  
                         l1447 0000                           l1439 0000                           l1481 0000  
                         l1473 0000                           l1465 0101                           l1449 0000  
                         l1483 0000                           l1475 0000                           l1459 00E6  
                         l1485 0000                           l1477 0000                           l1469 0111  
                         l1487 0000                           l1479 0000                           _GPIO 0005  
                         _TMR0 0001                           _main 00CA                           btemp 005E  
                         start 000B                          ?_main 002D                          _EEADR 009B  
                        _CMCON 0019                          _ANSEL 009F                          i1l365 0138  
                        i1l368 013E                          u22_25 014F                          u23_25 003F  
                        u24_25 0050                          u33_25 0090                          _timer 0024  
                        pclath 000A                          status 0003                          wtemp0 005E  
                 __end_of_main 0133           _interruptOnChangeIsr 0010                         ??_main 0036  
                       _EEDATA 009A                         _EECON2 009D                         i1l1321 0000  
                       i1l1403 00AD                         i1l1411 00B3                         i1l1331 0000  
                       i1l1421 0000                         i1l1405 00AE                         i1l1341 0000  
                       i1l1333 0000                         i1l1325 0000                         i1l1335 0000  
                       i1l1423 0000                         i1l1415 00B9                         i1l1407 0000  
                       i1l1343 0000                         i1l1417 00BA                         i1l1409 00B1  
                       i1l1361 0000                         i1l1353 0059                         i1l1345 0000  
                       i1l1329 0000                         i1l1419 0000                         i1l1371 0000  
                       i1l1355 0000                         i1l1363 0067                         i1l1339 0000  
                       i1l1373 0077                         i1l1357 0000                         i1l1391 0092  
                       i1l1383 0000                         i1l1375 0078                         i1l1359 0000  
                       i1l1377 0000                         i1l1369 0000                         i1l1395 0000  
                       i1l1387 0000                         i1l1379 007A                         i1l1397 0000  
                       _TRISIO 0085                         _t0intr 0133                         _necpoj 002A  
        ?_interruptOnChangeIsr 002D                         clrloop 0167                         saved_w 005E  
               __pcstackCOMMON 0000                   __pidataBANK0 0000                     __pbssBANK0 0020  
                   __pmaintext 00CA                        ?_t0intr 002D         ??_interruptOnChangeIsr 002D  
                   __pintentry 0004                        _TIMEOUT 0039                __size_of_t0intr 0012  
                      _address 0027                        _command 0028           end_of_initialization 0164  
                   _notaddress 002B                     _notcommand 002C      interruptOnChangeIsr@tdiff 0030  
            _timerInterruptIsr 0145             ?_timerInterruptIsr 002D                 __end_of_t0intr 0145  
          ??_timerInterruptIsr 0000            start_initialization 0157      __end_of_timerInterruptIsr 0157  
                     ??_t0intr 0034                    __pdataBANK0 0037                  __pcstackBANK0 002D  
                    _dataready 0029  __size_of_interruptOnChangeIsr 00B1              interrupt_function 0004  
   __size_of_timerInterruptIsr 0012                       _GPIObits 0005                       _PREPULSE 0037  
 interruptOnChangeIsr@rxbuffer 0020                     _EECON1bits 009C                       __ptext80 0000  
                     __ptext77 0133                       __ptext78 0010                       __ptext79 0145  
                __size_of_main 0069                       clear_ram 0166                     _INTCONbits 000B  
                     intlevel1 0000                     _OPTION_REG 0081        interruptOnChangeIsr@pin 0033  
 __end_of_interruptOnChangeIsr 00C1  
